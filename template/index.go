// Code generated by go-bindata.
// sources:
// template/index.html
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x1b\x69\x73\xdb\xb6\xf2\x7b\x7f\xc5\x96\xf1\xd4\x72\x6b\x91\xb6\x63\xa7\x8d\x2d\x79\x5e\x0e\xa7\x89\x93\xc6\x49\xec\x9c\x6f\xde\x74\x20\x02\x14\xe1\x90\x00\x03\x80\x92\x55\xd7\xff\xfd\x0d\x00\x5e\x92\x48\x8a\x72\xdc\xf2\x83\xc5\x63\x77\xb1\x17\xf6\x22\x3d\x08\x55\x1c\x1d\xff\x00\x00\x30\x08\x09\xc2\xf6\xd4\x5c\x46\x94\x7d\x2d\xae\xf4\x21\x48\x34\x74\xa4\x9a\x45\x44\x86\x84\x28\x67\xee\x61\x28\x48\x30\x74\x42\xa5\x12\x79\xe8\x79\x31\xba\xf2\x31\x73\x47\x9c\x2b\xa9\x04\x4a\xf4\x85\xcf\x63\xaf\xb8\xe1\xed\xbb\x3b\xee\x4e\x7f\x44\x14\x72\xf7\x3c\x5f\xca\xf2\x91\x1b\x53\xe6\xfa\x52\xce\xd3\xa7\x4c\x91\xb1\xa0\x6a\x36\x74\x64\x88\xee\xff\xb6\xdf\x7f\x23\x9f\xff\xf6\xee\xd7\xbd\xd3\xb7\xf7\xcf\xcf\x70\xf8\x81\xde\x4f\xaf\x02\x15\xa3\x8f\x0f\x3e\xf8\x07\xbb\x7f\xbc\x1c\xed\x7c\x3b\x78\xb3\x27\xde\xbd\x4f\xde\x4c\x84\xfc\x2b\x3d\xd9\xff\xb8\x9b\xf0\xc9\xf3\xcf\xe3\x8b\xe4\x71\x20\xc3\xd1\x3c\x7d\x5f\x70\x29\xb9\xa0\x63\xca\x86\x0e\x62\x9c\xcd\x62\x9e\x56\x78\xf0\x32\x25\x79\xa5\x96\x06\x98\x4e\xc0\x8f\x90\x94\x43\xc7\xe7\x4c\x21\xca\x88\x70\x2a\x1a\xac\x3c\x17\x7c\x5a\x79\xb2\x8c\x1d\xf5\x65\xbc\x00\xb0\x04\x84\x04\xae\x01\xa9\x03\xeb\x6b\x26\xe7\x78\xa9\x3b\xde\x4b\x22\x64\x3d\x3d\x0f\xd3\x49\xc7\xa5\x46\x1c\xcf\x5a\x16\xaa\xc2\xa7\x7a\x41\x07\x8c\x0b\x0d\x1d\x4c\x65\x12\xa1\xd9\x21\xe3\x8c\x1c\xad\x60\x75\xa0\xd0\x28\x22\x39\x1d\x73\xb1\x02\xc3\x62\x89\xd5\x40\x16\x30\x3c\x7e\x46\x85\x54\xc0\x50\x4c\x06\x9e\x0a\xbb\xe3\xbd\x42\xb7\x42\xeb\x06\x3d\xf0\x56\x89\x30\xf0\x8c\x36\x5a\x0c\xd0\x6c\x4b\x58\xb0\x4f\xc4\x11\xa6\x6c\x0c\x8a\x5c\xa9\xbe\x4f\x98\x5a\xe9\x42\x03\x9a\xe3\x06\x08\x02\xd4\xf7\xa9\xf0\x23\xd2\xe7\x7d\xc6\x95\x1f\xea\x3b\x32\xa1\x4c\xff\xee\x5d\xe9\xbf\xc1\xd4\x39\x1e\x78\x74\x05\x51\x99\x20\x96\xd3\x95\xa2\xcf\x59\x34\x73\x8e\x5f\x59\xe6\x5c\xd7\x1d\x78\x1a\xe0\xb8\x8d\x84\x3e\xee\x42\x23\x8c\xf7\x05\x91\x69\xa4\xe4\x9c\x52\x6e\xe3\xc2\xaf\x79\xcb\x86\x5b\xc1\xd6\x3a\xfb\x31\xe0\x5c\x11\x01\x71\xaa\x48\x53\xb8\x30\x78\x0a\x1f\x0f\x50\x16\xb6\xef\x39\x40\xf1\xd0\x41\x18\x3b\x73\xb4\x74\x0a\x00\xc6\x55\x1f\xf9\x8a\x4e\x88\x73\xfc\x08\xe3\x81\x87\xb4\xf3\xe2\xb5\x38\xad\xb9\xbd\x70\xab\x72\x99\x9d\x2e\xc5\xd8\x98\x63\x14\x41\x80\x30\xb1\xec\xea\x70\xf2\x87\xbe\xd7\x10\x73\x0d\x7c\x1f\x53\x14\xf1\xb1\x03\x82\x1b\x8b\x71\x3f\x8d\x09\x53\x2d\xc1\xd8\xa2\xe9\x80\xde\x05\xae\x31\xd2\x0e\xc2\x83\x79\x48\x45\x95\x8e\x5a\x03\x2f\x3c\xa8\x81\x1e\xa5\x4a\x71\x06\x6a\x96\x90\xa1\x63\x2f\x4a\x5b\x44\x5c\x12\x07\x30\x52\xa8\x8f\xa9\x8c\x69\x41\xd4\x01\x24\x28\xea\x47\x68\xa4\x73\xf3\x13\x03\x57\x43\xdc\x6c\x28\x03\x19\x52\x8c\x09\x1b\x3a\x4a\xa4\xc4\x39\xfe\x49\xd1\x98\xc8\xa3\x6c\x43\xd5\x58\xcd\x32\xd2\x6a\xb8\x7a\xb5\x34\x64\x85\x2a\x60\xc0\x45\xdc\x1f\x0b\x9e\x26\x4d\x59\xcd\x88\x05\x01\x17\x43\x27\xd0\xd1\xd9\xc9\x82\xf4\x6b\x13\x6d\xcd\xd3\x06\x4c\xca\x92\x54\x65\xca\xd4\x1b\xd7\x99\x5b\x54\xdb\x56\xf0\xc8\x7a\x91\xa5\x0c\x49\x84\x7c\x12\xf2\x08\x13\x31\x74\xca\x65\xea\x64\x68\x70\xf1\xdb\x8a\x16\x21\x2d\x99\x49\x23\x77\x2a\x98\xa1\x3b\x2f\x57\xb1\x48\x37\xb1\x3a\x59\xda\xc6\x9b\x3a\x82\x6d\x2e\x3d\x52\x0c\x46\x8a\xf5\x13\x41\x63\x24\x66\x20\x91\x0e\x2f\xe7\x68\x42\xc0\x0f\x11\x1b\x13\x59\xef\x7c\x9d\x09\x4b\xe2\x73\x86\x91\x98\xd5\xef\x9b\x63\xb3\x57\xba\x3b\x78\xb7\x60\x65\xd2\x42\x09\xa6\x42\xb8\x86\x11\x17\x98\x88\xbe\xe2\x89\x49\x13\x3f\xd2\x38\xe1\x42\x21\xa6\x8e\xe0\xa6\xcc\x51\x6e\x51\x40\xc2\x35\xc4\x48\x8c\x29\x33\x28\x7b\x3b\xc9\xd5\x11\x4c\x29\x56\xe1\xe1\xc1\x8e\x20\xf1\x11\xdc\x94\x48\x65\x68\x86\x6b\x48\xb8\xae\x91\x45\x9f\x4c\x08\x53\xf2\x10\x4c\x52\x02\x3f\x15\x92\x8b\x43\xc0\x24\x40\x69\xa4\x8e\xc0\xe7\x91\xbe\x16\xe3\x51\x6f\xf7\xe0\xc1\x36\xec\x1e\x1c\x98\x3f\x5b\x9a\x1f\x7b\x64\x82\x65\xd2\xd8\xab\x1f\xfb\x7d\xb8\x20\x71\x12\x21\x45\x24\xf4\xfb\x99\xf4\xd2\x17\x34\xa9\x3a\xa4\xa7\x32\xa0\x32\x46\xbf\x9b\xab\x7d\x07\x4a\x58\x8b\xd0\x85\x14\x32\x50\xd8\x3e\x30\x3b\xb2\x26\xc7\x14\x00\xda\xb3\xeb\x9f\xd7\x38\x4b\x25\xc7\x2d\xa5\xb6\x34\xc1\x9a\xd3\xe3\xf7\xe6\x57\x67\xb6\xf5\xf0\x05\x89\xb9\xf6\xdb\x77\xe6\x77\x09\x7f\x9e\xc5\xb2\x96\x1b\x78\x56\x6d\xc7\xa5\x6a\x4f\x18\x5e\x50\x6f\xf9\xec\x14\x4d\x50\xa6\xe7\x45\xbd\x4b\xe1\x97\x4d\x57\x2a\x89\x1b\x68\x37\x9a\x12\xc9\x63\x62\x1a\xae\x3d\xfc\x60\xc7\xf7\x0f\x76\x1e\x22\xf7\x52\xea\xe4\x33\xb7\xb2\xbd\x28\x38\x9c\xa3\xe6\x73\x4c\xdc\xcb\x6f\x29\x11\x33\x43\xc9\x9e\xf6\xef\xbb\x7b\xee\xae\x69\xd1\x2e\x2b\xdd\xd1\x7c\x77\xb6\x77\xf0\xa0\x1f\x4e\xc7\xfb\x63\x79\x35\x7e\xf6\x25\x3c\x93\x27\x27\x28\xc6\x67\x9f\x7f\x7f\x1c\xec\xde\x7f\x36\x7b\x9b\xd2\x8b\x69\xf4\xe8\xed\xf8\xea\xc3\xf9\xeb\xb1\xda\x1f\x96\x74\x1a\xba\xb0\x5a\xb5\xb5\x32\x8f\xd9\xa5\x74\xfd\x88\xa7\x38\x88\x90\xb0\xba\x40\x97\xe8\xca\x8b\xe8\x48\x7a\x09\x4f\x12\x22\xdc\x4b\xe9\xed\xba\xbb\x7b\xee\x7d\x2f\x8d\x71\x7e\xb3\x5d\x34\xdd\x78\x4e\x9e\x9d\x7e\x4a\xcf\x4f\x93\xf0\xdd\xd9\x0b\xf1\x98\xfd\xf5\xeb\x8c\xff\xca\x1f\xef\xef\xc6\x2f\x03\xff\xb7\xd3\xbf\xde\x7e\xa1\x4f\xbe\xed\xbf\x7e\xe2\x93\x57\x27\xe8\x6c\xff\xc5\xf3\x29\xf5\x5f\x4e\x93\xd3\xe0\xa1\xff\xf0\x45\xf2\x6c\x1c\xde\xbd\xb8\x6b\xb6\xdb\x97\x8b\xdd\x76\xbb\xbc\x28\x4a\x1e\x27\x5f\xc3\xdd\x37\xcf\xce\x48\xe2\xfb\x9f\x3f\x7c\x7e\xfa\x78\x1f\xf3\x83\xf7\x6c\xf4\x72\x26\x3f\x1d\x7c\xfc\xf2\x29\xbe\xff\xe9\xea\xcd\x37\x72\x40\x5f\x5e\x04\xef\x5f\x5e\xbe\xfe\xfa\xe4\xeb\xc3\x73\xf4\x21\x3d\xf9\x12\x44\xa7\xdf\x23\x6f\x35\xb2\x5c\x16\xfb\xa0\x12\x4e\x3c\x0f\x74\x8c\x39\x27\x62\x42\x7d\x02\x2a\x24\x20\xb3\xf3\x69\x48\xfd\x10\x62\xc4\xd0\x98\x48\x18\x13\xa5\x74\x73\xe3\xd9\x5d\xaf\x4f\x4d\x3f\xea\x16\xa4\x26\x48\xcc\xd1\x1a\xc2\xf5\xdc\x76\xf6\x7e\xfe\x79\x3e\x3c\xfc\x0c\x17\x21\x81\x47\x6f\x5e\x00\x61\xd8\x84\x5f\x77\x11\xe0\x3f\x09\x12\x28\x06\xa9\x04\x65\xe3\x85\x87\xde\xdc\x75\x4e\xe2\x10\x36\xaf\xaf\xdd\x93\xec\xea\xe6\x66\x73\xfb\x87\x55\x5c\x50\x46\x15\x45\x11\x95\x44\x1a\x05\x68\x21\x72\x2d\x6c\x43\xde\xd5\x19\x69\x21\x10\x3c\xb6\x5a\x9a\x49\x45\xe2\x65\x86\x05\x51\xa9\x60\x30\xe1\x14\xb7\xf2\xab\x17\x3d\x84\x20\x65\xbe\xa2\x9c\xf5\xb6\x16\x94\x95\x2b\xf4\x4f\x15\x52\x09\x43\xd0\x3f\x47\x4b\x10\xfa\xae\x3b\x26\xca\x74\x46\xbd\xad\x65\x80\x8d\x9e\x73\x4f\xb7\x25\x5b\x2e\x0f\x82\x9e\xe3\x47\xd4\xff\xaa\x2f\x58\x7e\xbe\x5d\xb2\x40\x26\x75\x4c\x18\xdd\x4e\xdc\x44\x98\xbc\xf8\xd4\xa6\xc1\xba\xa5\xf4\x61\xb8\x75\x11\xc6\x9a\xa1\x3a\xa0\x9b\x85\x7b\x37\xab\xad\x33\x26\x4a\x02\x62\x18\x50\x92\x10\x86\xad\x89\x22\x2a\x15\xf0\x60\xd1\x28\x28\xa1\xa0\xb8\x39\x35\x6d\xfd\xed\xcd\x93\x2b\xb5\x83\x89\x34\x2f\x06\x36\x33\x93\x9b\xbb\xe2\xb2\xf8\xab\x2d\xba\xe1\xea\x30\xdb\xab\xb7\x43\x2a\xa2\xc3\x72\xb9\xed\x5a\x98\x98\xa8\x90\xe3\x43\x70\x7e\x3f\xb9\x70\xea\x41\xb2\xde\xec\x62\x96\x90\x43\x70\x50\x92\x44\xd4\x47\x5a\x44\xef\x52\x72\xd6\x80\x24\x53\xdf\x27\xb2\xaa\x0f\x41\x64\xc2\x99\x24\x4d\x5e\x03\x36\xbc\xc8\x90\x4f\x8d\x45\x18\x87\x7c\x18\x90\x71\x00\x34\xd0\x4f\x04\x01\x24\xcc\x73\x6b\x4e\x2e\x00\x31\x20\x42\x70\xd1\x46\x98\xfb\x7e\x2a\x04\xc1\x6e\x23\x10\x0d\xa0\xe0\xd2\xd5\x09\x19\x7e\x1c\x0e\x61\x6f\x67\x07\xfe\xfe\x1b\x8a\x07\x36\x8c\x45\x84\x8d\x55\x08\xc3\xe1\x10\x76\xda\x24\x82\xc2\xcd\xb5\x60\xaf\xb9\x7a\xc6\x53\x86\x9b\x36\x44\x7e\x58\xb7\x6b\x04\xb9\x69\x7c\xb2\xe1\x12\xe4\x87\xbd\x79\x66\x2b\x9b\x96\x32\x4c\xae\xb6\x8d\xe2\x56\x71\xed\x73\x26\x79\x44\xdc\x88\x8f\x7b\x06\xbe\x9d\x65\xcf\x83\x51\x4a\x23\x5c\x86\x44\xc1\xa7\xcd\xba\x86\xcc\xbd\xf3\xfa\x15\x86\xb0\xd1\xd3\xe1\x27\x2f\x61\xb7\xdc\x50\xc5\x51\x6f\x6b\xc5\xb2\x56\xb7\x09\x4f\x52\x4d\xa5\x97\x93\xcb\x44\x3c\xfa\x61\x05\xcf\x36\x48\xcc\xf1\xdc\x16\x11\x6a\x17\x47\x18\xbf\xe3\xd3\x62\xe9\x16\x86\x6f\xda\x18\xf2\x3c\xc8\x06\x5c\x5d\x96\xb7\x4b\x87\x14\x93\x55\x3e\x75\xd3\xb4\xab\xe3\x24\x22\x8a\xac\x88\x58\x15\xee\x50\x34\x45\x33\x09\xa6\x03\xd2\x16\x33\x11\x14\x63\xb0\x4d\x5d\x33\xab\x65\x52\xb1\x05\xfc\x13\x5d\xd7\xf7\x9c\xca\xa0\xab\x89\xf3\x9a\x7c\xb0\x6e\x3a\xb0\xbd\x86\x04\x64\xed\x9b\x4a\x33\x71\xb5\x75\xc4\x62\xb8\x6f\xa8\x26\xae\xcf\x46\x97\xc4\x57\x37\x96\x02\x80\x29\x43\xcc\xb9\xe2\x59\x4f\xd3\x54\x88\x14\xa8\x24\x22\xb1\x8e\x60\x1a\xf5\xe2\x9d\x71\x33\x5b\x2f\x15\x9e\x47\x25\x48\x52\x53\xd1\x74\xcd\x40\x96\x11\x1d\xe9\x2b\x16\xd5\x94\xb7\xf3\xc5\xeb\xcc\x6b\xbc\x28\x73\x3b\x33\xdc\xeb\x65\xc0\xc5\x06\x5a\x53\xdf\x8f\x30\xd6\xca\x66\x64\x9a\x89\xc5\x3a\x27\x58\x68\x95\x2f\xab\x12\x56\xb8\xeb\xb2\x3c\x0d\x51\x65\x7d\xc9\xf2\x18\x53\xf8\x92\x36\xa2\x29\x34\x94\x42\x7e\x48\x24\x98\x92\x07\x42\xc4\x70\x34\x57\xe9\xae\x2d\x6b\xbe\x54\x45\xd8\x79\xb3\xdc\xaa\xfa\xcb\x48\xb8\x48\x29\xd1\x73\xb2\xa1\x80\x63\x29\xba\x14\xd7\x6c\xc2\x1c\x23\xa0\x0c\xf7\x9c\xff\x96\xe3\x82\xff\x39\x5b\xae\x6e\x12\x8c\x83\xb9\xe6\x56\x47\xf4\x08\x2d\x62\xeb\x3b\x35\xc8\x3a\xe0\x48\x49\xc7\xcc\xaa\x55\xe6\x61\x19\x19\x7d\x48\x08\xb8\x30\x72\x5a\xf6\x6b\xd5\x61\xb7\x04\x0c\x17\x18\x41\x6e\x36\x88\xa8\x59\x55\xa3\xd9\x28\x55\x83\x96\xcd\x1f\x6a\xd0\xb2\x28\xf0\x2f\x16\xcd\xe5\x76\x5f\xd8\xe4\xab\x8b\x68\x30\x05\x86\x16\xe5\xdf\x64\xd8\xae\x58\x30\xec\x52\xbc\x0e\xcf\x1d\xf6\xe7\x53\xbb\xeb\x6d\xc1\x6f\x5f\x5e\xe8\xdd\x99\xe6\x6d\x5a\x56\xec\xcb\x74\x14\x53\x65\xee\x50\x16\x70\x11\x9b\x52\x76\xdd\x54\x50\x8d\xe7\xf9\xf9\xd4\x94\xa6\x45\x40\x27\x57\x54\x2a\xe9\xc2\x45\x48\xe5\x22\xb9\xa6\x63\x4a\xa3\x08\x46\x24\x0b\xa0\x39\x61\x1a\x00\x55\x3a\x41\x94\x71\x75\x65\xc2\x59\xca\x55\x53\x5b\x35\xe7\xdd\xf8\xb6\xdd\x3c\xf9\x82\x29\xc3\x24\xa0\x8c\x2c\xe6\x98\x46\x4e\x69\x90\x53\x44\xd8\xf4\xbb\x6d\xbc\x75\xcd\x61\xd5\xc0\x7d\xb7\xb1\xaf\x2e\xbc\x48\xa2\x34\x26\xd5\x89\x69\x31\x5a\x67\x44\x6d\x77\x04\x43\x70\xde\x9c\x9d\x5f\x38\xf5\xf1\x22\x15\x51\xb7\x56\xce\xbc\x92\xd2\xc4\x1e\x61\xdc\x40\xcb\xfa\xad\xae\x85\x37\xef\x15\x2f\xdc\x36\x1b\x02\x95\x89\xbb\x30\xb4\x48\x59\x94\xba\x67\x5f\xb0\x34\x60\xe8\x58\xbb\x88\x60\x5e\x5c\xd4\x15\xa6\x9e\x97\x59\x39\x44\x13\x92\x25\x3d\x17\x3e\xce\xfb\x91\xbb\xfc\x86\x55\xb7\x51\xc6\xe5\x74\xf7\x54\x38\x56\x53\x18\xa9\xa8\xf8\xd1\xc5\x93\xe7\x35\x7a\x01\xdb\xca\xc2\x2f\x43\x70\x3c\x07\x7e\xc9\x13\x56\x3d\x64\xa1\x64\x5b\xf9\x35\xd0\x33\x5a\x72\x27\x28\x6a\xcf\x60\xfa\xd0\xfa\x29\x21\x1b\xb2\x95\x8e\x08\x92\x34\x88\x68\x94\x31\x84\xeb\x9b\x1a\xbc\x5a\xb5\xdb\x8a\xc2\xbc\xa5\x29\x76\x01\x8a\xa8\x9a\x2d\x7b\x69\xd5\x94\xae\x79\xad\xf3\x2f\xcd\x6e\x3c\x0f\x74\xf7\x51\x46\xdb\xfa\x06\xc0\x3e\x32\x7f\x7b\x9b\x1a\x61\xb3\xa9\x07\x2a\x0d\x01\xc3\x8a\x7d\x1a\x96\x2f\x8c\x01\xc3\xd2\x42\x4d\xa4\x6d\x6b\x65\xbe\x69\xd1\x0d\x8b\x97\x57\x06\x3f\xe5\xb9\xde\xb6\x30\x12\x70\x2a\xcc\xec\xae\xae\xa8\xcf\x8e\xd6\x89\x0b\xe4\x53\x97\x54\x44\xf5\x6d\x17\x54\x66\x2e\xf6\xb7\x19\xee\x56\x83\x17\x7d\xe8\x4a\xeb\x10\x4e\xcf\xcf\x5e\xbb\x76\x14\x4a\x83\x99\xed\xe1\x9b\x71\x46\x24\xe0\x82\x9c\x13\x86\x3b\x76\x84\x30\x37\xd9\xc8\xbe\x17\x59\x35\xd8\xf8\x33\x2f\xd0\xb5\x31\x1e\xd9\x52\xae\x0d\xa7\xa1\x79\x85\x5b\x4f\x98\x60\x71\xce\x43\x71\xb7\x38\x55\x3d\xb2\x00\x04\x43\xa8\x90\x69\xc5\x6a\x9e\xd8\xc0\xf2\x10\xa3\xad\x05\xbb\x73\x59\xe6\x66\x18\xcd\x05\x59\x37\x61\x5a\xcc\xb5\xe6\xbc\x21\x97\x6d\xa3\xb7\xe9\xda\xaf\xd1\x94\xd8\xdc\xaa\x8e\xdd\x76\xbb\x4b\xb7\xce\xe8\xad\x35\x92\x2f\x93\xee\x32\x81\x29\x48\x77\x70\x02\xc2\xba\xee\x8c\xfa\x91\xc9\x56\x6d\x29\xdd\x54\xfe\x94\xa5\xb2\x49\x9b\x2b\xd2\x4b\xf5\xc3\x9a\xac\x83\xb3\xd9\xf6\x17\x70\xcc\xd7\x56\x75\x65\xc7\xc2\x58\xab\x21\x55\x54\xd3\xc4\x8a\xd2\xdf\xba\xea\x72\x79\x58\xe7\x0e\x1b\x3d\x27\x77\x9e\x43\x5b\xe7\xb8\x28\x50\x44\x34\x38\x7a\x87\x2e\x43\xbb\x92\xcc\xe6\xd3\x0a\x02\x6d\x76\x28\x3e\x26\xb8\x7d\xe5\x5b\xf5\xd0\x15\x3b\x64\xa3\xe7\xb8\xe5\x87\x72\xce\x96\xf1\xee\x86\x97\x39\x76\xfe\xeb\x6c\x19\x37\x6d\x82\xc9\xde\x58\x35\x40\x75\xd0\x89\x46\xfb\x07\x74\x52\xdd\x5a\xeb\xea\xa4\x4d\xde\x5c\x27\x6d\x7a\xfb\x6e\x9d\x94\x7e\x92\xbf\x10\xa4\xfe\x72\x9b\xb9\x9e\x83\x64\x39\xf6\x9f\xd0\x45\x37\xff\xa8\xd3\x58\x07\x5d\x64\xe9\x5e\x02\x8a\xa2\x62\x7e\x43\x99\xd1\xce\x1d\xf8\xc9\x7c\x35\xb1\x52\x3b\x9b\xe5\xc7\x3f\x9b\x5b\xf9\x6c\x47\x07\x06\x8c\xb3\xc9\xb4\xdb\x3c\x9a\xee\x20\xad\x8d\xe0\xff\x94\xb0\x30\x97\x20\x6e\x2d\xec\xdc\x24\xfe\xfb\xe4\xb5\xa4\xba\x4d\xd8\xbb\xcb\x59\x8e\x8b\x2a\x32\x56\x67\x46\xb7\x1a\x03\xac\x7e\x5d\xfa\xe7\x5c\x1f\xaf\x33\x9b\x69\x39\x69\x43\x99\x5e\xbc\x3e\x7d\x7a\xf2\xea\xe4\xe2\xa4\xa1\x26\x5f\xbb\xb6\x5e\xa7\x4c\x6e\xa8\xb9\x6e\x57\x1e\x6f\x14\x99\x31\x73\x91\xb6\x12\xc4\x0e\x08\x38\x8b\x6c\x6a\xb7\xdf\xe6\x6a\xcb\x21\xca\x6a\x06\x2a\xf9\xf1\x9d\x65\xdd\x7a\x25\x5d\x43\x99\x74\x27\xef\xc4\xd6\xa8\xd8\x56\xbf\xca\x2a\xae\x6e\x2a\xe5\x9a\x2e\xd3\x14\x12\x6a\xe9\x3b\x93\x52\xbb\x95\x4f\x68\x5c\xca\x68\xd1\xaf\x37\x7c\xf5\x76\x8a\x26\xd2\xcf\xbf\x6d\x1b\x78\xe6\xff\x91\xfe\x1f\x00\x00\xff\xff\xa8\xcf\xb8\x8e\x96\x34\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 13462, mode: os.FileMode(420), modTime: time.Unix(1512426543, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
